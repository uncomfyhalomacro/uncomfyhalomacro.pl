<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>uncomfy - crystal</title>
    <subtitle>uh... i have a website?</subtitle>
    <link rel="self" type="application/atom+xml" href="https://uncomfyhalomacro.pl/tags/crystal/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://uncomfyhalomacro.pl"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2023-07-31T00:00:00+00:00</updated>
    <id>https://uncomfyhalomacro.pl/tags/crystal/atom.xml</id>
    <entry xml:lang="en">
        <title>Packaging Crystal Software for openSUSE</title>
        <published>2023-07-31T00:00:00+00:00</published>
        <updated>2023-07-31T00:00:00+00:00</updated>
        
        <author>
          <name>
            Soc Virnyl Estela
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://uncomfyhalomacro.pl/blog/how-to-package-crystal-software-in-opensuse/"/>
        <id>https://uncomfyhalomacro.pl/blog/how-to-package-crystal-software-in-opensuse/</id>
        
        <content type="html" xml:base="https://uncomfyhalomacro.pl/blog/how-to-package-crystal-software-in-opensuse/">&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;a class=&quot;zola-anchor&quot; href=&quot;#prerequisites&quot; aria-label=&quot;Anchor link for: prerequisites&quot;
  &gt;§&lt;&#x2F;a
&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;You will need the following:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;osc&lt;&#x2F;code&gt; and &lt;code&gt;obs-service-download_files&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;your editor of choice e.g. emacs, helix&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;tar&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;familiarity of how to use &lt;a href=&quot;https:&#x2F;&#x2F;build.opensuse.org&#x2F;&quot;&gt;https:&#x2F;&#x2F;build.opensuse.org&#x2F;&lt;&#x2F;a&gt;. See &lt;a href=&quot;https:&#x2F;&#x2F;en.opensuse.org&#x2F;Portal:Packaging&quot;&gt;https:&#x2F;&#x2F;en.opensuse.org&#x2F;Portal:Packaging&lt;&#x2F;a&gt; for guides. Fedora has one too, see &lt;a href=&quot;https:&#x2F;&#x2F;docs.fedoraproject.org&#x2F;en-US&#x2F;packaging-guidelines&quot;&gt;https:&#x2F;&#x2F;docs.fedoraproject.org&#x2F;en-US&#x2F;packaging-guidelines&lt;&#x2F;a&gt;.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;crystal&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Check with zypper if &lt;code&gt;osc&lt;&#x2F;code&gt; is installed.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Tip&lt;&#x2F;strong&gt;: Use the &lt;code&gt;cnf&lt;&#x2F;code&gt; command to check which package &lt;code&gt;osc&lt;&#x2F;code&gt; comes from.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;cnf&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; osc&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;recipe&quot;&gt;Recipe&lt;a class=&quot;zola-anchor&quot; href=&quot;#recipe&quot; aria-label=&quot;Anchor link for: recipe&quot;
  &gt;§&lt;&#x2F;a
&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;The following subtopics explain how to package crystal software step-by-step. Adjust accordingly based on your setup.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;create-a-new-package&quot;&gt;Create a new package&lt;a class=&quot;zola-anchor&quot; href=&quot;#create-a-new-package&quot; aria-label=&quot;Anchor link for: create-a-new-package&quot;
  &gt;§&lt;&#x2F;a
&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;You can do it at &lt;a href=&quot;https:&#x2F;&#x2F;build.opensuse.org&#x2F;&quot;&gt;https:&#x2F;&#x2F;build.opensuse.org&#x2F;&lt;&#x2F;a&gt; but if you prefer the commandline,
you can do for example&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;osc&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; mkpac blahaj&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-cd z-shell&quot;&gt;cd&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; blahaj&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;In this tutorial, we will try to package &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;GeopJr&#x2F;BLAHAJ&quot;&gt;BLAHAJ&lt;&#x2F;a&gt; using the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;crystal-lang&#x2F;shards&quot;&gt;shards&lt;&#x2F;a&gt; project and dependency manager for
&lt;a href=&quot;https:&#x2F;&#x2F;crystal-lang.org&quot;&gt;Crystal&lt;&#x2F;a&gt; and &lt;code&gt;tar&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;package-without-a-dependency&quot;&gt;Package without a dependency&lt;a class=&quot;zola-anchor&quot; href=&quot;#package-without-a-dependency&quot; aria-label=&quot;Anchor link for: package-without-a-dependency&quot;
  &gt;§&lt;&#x2F;a
&gt;
&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;write-the-specfile&quot;&gt;Write the specfile&lt;a class=&quot;zola-anchor&quot; href=&quot;#write-the-specfile&quot; aria-label=&quot;Anchor link for: write-the-specfile&quot;
  &gt;§&lt;&#x2F;a
&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Using your preferred editor, create a file named &lt;code&gt;blahaj.spec&lt;&#x2F;code&gt;. The following prelude should be enough for the specfile:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; class=&quot;language-txt z-code&quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Name: blahaj
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Version: 2.1.0
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;License: BSD-2-Clause
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Summary: Gay sharks at your local terminal
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Url: https:&#x2F;&#x2F;github.com&#x2F;GeopJr&#x2F;BLAHAJ
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Source0: https:&#x2F;&#x2F;github.com&#x2F;GeopJr&#x2F;BLAHAJ&#x2F;archive&#x2F;refs&#x2F;tags&#x2F;v2.1.0.tar.gz#&#x2F;%{name}-%{version}.tar.gz
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Source1: vendor.tar.zst
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;BuildRequires: crystal
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;BuildRequires: shards
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;BuildRequires: make
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;How do I have &lt;code&gt;shards&lt;&#x2F;code&gt; and &lt;code&gt;crystal&lt;&#x2F;code&gt;?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;You can branch packages from my home project at Open Build Service - &lt;a href=&quot;https:&#x2F;&#x2F;build.opensuse.org&#x2F;project&#x2F;show&#x2F;home:uncomfyhalomacro&quot;&gt;https:&#x2F;&#x2F;build.opensuse.org&#x2F;project&#x2F;show&#x2F;home:uncomfyhalomacro&lt;&#x2F;a&gt;. Or even just add an repository
image of that project. I have &lt;code&gt;shards&lt;&#x2F;code&gt; and &lt;code&gt;crystal&lt;&#x2F;code&gt; there. The latter can also be found at &lt;a href=&quot;https:&#x2F;&#x2F;build.opensuse.org&#x2F;package&#x2F;show&#x2F;devel:languages:crystal&#x2F;crystal&quot;&gt;https:&#x2F;&#x2F;build.opensuse.org&#x2F;package&#x2F;show&#x2F;devel:languages:crystal&#x2F;crystal&lt;&#x2F;a&gt; if
you want that too.&lt;&#x2F;p&gt;
&lt;p&gt;For the sake of simplicity, we will assume that we are going to use &lt;code&gt;crystal&lt;&#x2F;code&gt;, &lt;code&gt;shards&lt;&#x2F;code&gt;, and &lt;code&gt;make&lt;&#x2F;code&gt; at your home project in Open Build Service.&lt;&#x2F;p&gt;
&lt;p&gt;Add the following sections: description, prep, build, install, files and changelog section.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; class=&quot;language-txt z-code&quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Name: blahaj
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Version: 2.1.0
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Release: 0
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;License: BSD-2-Clause
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Summary: Colorize your terminal with gay sharks
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Url: https:&#x2F;&#x2F;github.com&#x2F;GeopJr&#x2F;BLAHAJ
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Source0: https:&#x2F;&#x2F;github.com&#x2F;GeopJr&#x2F;BLAHAJ&#x2F;archive&#x2F;refs&#x2F;tags&#x2F;v2.1.0.tar.gz#&#x2F;%{name}-%{version}.tar.gz
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;BuildRequires: crystal
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;BuildRequires: shards
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;BuildRequires: make
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;%description
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Apart from a cute cuddly shark plushie from IKEA, BLÅHAJ is a lolcat-like CLI tool
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;that colorizes your input, shows flags and prints colorful sharks!
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;It has a wide variety of flags&#x2F;colors to choose from and many options from flag size
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;to whether to colorize by line, word or character.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;%prep
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;%build
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;%install
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;%files
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;%changelog
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At the root of your project package e.g. &lt;code&gt;home:yourusername&#x2F;blahaj&lt;&#x2F;code&gt;, run &lt;code&gt;osc service localrun download_files&lt;&#x2F;code&gt;. You will get a file called &lt;code&gt;blahaj-2.1.0.tar.gz&lt;&#x2F;code&gt;.
Extracting the file gets us the directory &lt;code&gt;BLAHAJ-2.1.0&#x2F;&lt;&#x2F;code&gt;. This means that in our &lt;code&gt;%prep&lt;&#x2F;code&gt; section, we need to add &lt;code&gt;%setup -qa1 -n BLAHAJ-%{version}&lt;&#x2F;code&gt;. This is to
redirect the rpm macros that building should be at &lt;code&gt;RPM_BUILDDIR&#x2F;BLAHAJ-2.1.0&#x2F;&lt;&#x2F;code&gt; since by default, it is &lt;code&gt;RPM_BUILDDIR&#x2F;nameofpackage-version&#x2F;&lt;&#x2F;code&gt;
based on the &lt;code&gt;Name:&lt;&#x2F;code&gt; and &lt;code&gt;Version:&lt;&#x2F;code&gt; RPM specfile prelude.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;building-and-installing-the-package&quot;&gt;Building and Installing the package&lt;a class=&quot;zola-anchor&quot; href=&quot;#building-and-installing-the-package&quot; aria-label=&quot;Anchor link for: building-and-installing-the-package&quot;
  &gt;§&lt;&#x2F;a
&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;The following sections should be easy here since &lt;code&gt;make&lt;&#x2F;code&gt; as build dependency has convenient macros such as &lt;code&gt;%make_build&lt;&#x2F;code&gt; and &lt;code&gt;%make_install&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; class=&quot;language-txt z-code&quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Name: blahaj
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Version: 2.1.0
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Release: 0
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Summary: Colorize your terminal with gay sharks
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;License: BSD-2-Clause
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Url: https:&#x2F;&#x2F;github.com&#x2F;GeopJr&#x2F;BLAHAJ
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Source0: https:&#x2F;&#x2F;github.com&#x2F;GeopJr&#x2F;BLAHAJ&#x2F;archive&#x2F;refs&#x2F;tags&#x2F;v2.1.0.tar.gz#&#x2F;%{name}-%{version}.tar.gz
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;BuildRequires: crystal
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;BuildRequires: shards
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;BuildRequires: make
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;%description
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Apart from a cute cuddly shark plushie from IKEA, BLÅHAJ is a lolcat-like CLI tool
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;that colorizes your input, shows flags and prints colorful sharks!
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;It has a wide variety of flags&#x2F;colors to choose from and many options from flag size
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;to whether to colorize by line, word or character.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;%prep
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;%setup -q -n BLAHAJ-%{version}
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;%build
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;%make_build
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;%install
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;%make_install
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;%files
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;%{_bindir}&#x2F;blahaj
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;%doc README.md CODE_OF_CONDUCT.md
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;%license LICENSE
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;%changelog
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As for &lt;code&gt;%files&lt;&#x2F;code&gt;, you can just do a &quot;best guess&quot; or &quot;best observation&quot; approach. Here, we based it from the &lt;code&gt;Makefile&lt;&#x2F;code&gt; and for documentation and license, those are
self-explanatory.&lt;&#x2F;p&gt;
&lt;p&gt;Changelog can be left as is since we are not Fedora 😘. We use &lt;code&gt;blahaj.changes&lt;&#x2F;code&gt; for that generated with &lt;code&gt;osc vc&lt;&#x2F;code&gt;. It creates a temporary file you can edit
from like below&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; class=&quot;language-txt z-code&quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;-------------------------------------------------------------------
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Mon Jul 31 12:34:07 UTC 2023 - Your Name &amp;lt;youremail@example.com&amp;gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;- Initial spec for blahaj 2.1.0
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;add-the-files&quot;&gt;Add the files&lt;a class=&quot;zola-anchor&quot; href=&quot;#add-the-files&quot; aria-label=&quot;Anchor link for: add-the-files&quot;
  &gt;§&lt;&#x2F;a
&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Add the files by running the command&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;osc&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; add blahaj.spec blahaj-2.1.0.tar.gz blahaj.changes&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then push it to your home project at Open Build Service with &lt;code&gt;osc ci&lt;&#x2F;code&gt;, which allows you to check the diff and see what was changed based from the
&lt;code&gt;blahaj.changes&lt;&#x2F;code&gt; file.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;check-if-it-builds-correctly&quot;&gt;Check if it builds correctly&lt;a class=&quot;zola-anchor&quot; href=&quot;#check-if-it-builds-correctly&quot; aria-label=&quot;Anchor link for: check-if-it-builds-correctly&quot;
  &gt;§&lt;&#x2F;a
&gt;
&lt;&#x2F;h3&gt;
&lt;p&gt;Now check your new blahaj package at your home project. If it fails, investigate what went wrong! Check mine at
&lt;a href=&quot;https:&#x2F;&#x2F;build.opensuse.org&#x2F;package&#x2F;show&#x2F;home:uncomfyhalomacro&#x2F;blahaj&quot;&gt;https:&#x2F;&#x2F;build.opensuse.org&#x2F;package&#x2F;show&#x2F;home:uncomfyhalomacro&#x2F;blahaj&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;&#x2F;strong&gt;
It seems at the time of writing, I missed some dependencies or optional dependencies for
crystal! Anyway, &lt;em&gt;I am confident&lt;&#x2F;em&gt; it will build this correctly after that&#x27;s fixed.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;package-with-dependencies&quot;&gt;Package With dependencies&lt;a class=&quot;zola-anchor&quot; href=&quot;#package-with-dependencies&quot; aria-label=&quot;Anchor link for: package-with-dependencies&quot;
  &gt;§&lt;&#x2F;a
&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;This is where &lt;code&gt;tar&lt;&#x2F;code&gt; and &lt;code&gt;shards&lt;&#x2F;code&gt; comes in. An example of this is &lt;code&gt;shards&lt;&#x2F;code&gt; itself. See &lt;a href=&quot;https:&#x2F;&#x2F;build.opensuse.org&#x2F;package&#x2F;show&#x2F;home:uncomfyhalomacro&#x2F;shards&quot;&gt;https:&#x2F;&#x2F;build.opensuse.org&#x2F;package&#x2F;show&#x2F;home:uncomfyhalomacro&#x2F;shards&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;What I did here is at the root of the project e.g. home:yourname&#x2F;shards, I extracted the shards source tarball, &lt;code&gt;tar xvf shards-0.17.3.tar.gz&lt;&#x2F;code&gt;. Changed directory
to the extracted directory, &lt;code&gt;shards-0.17.3&#x2F;&lt;&#x2F;code&gt; and then ran &lt;code&gt;shards check&lt;&#x2F;code&gt; and &lt;code&gt;shards install&lt;&#x2F;code&gt;. You will get a new directory called &lt;code&gt;lib&#x2F;&lt;&#x2F;code&gt;. This is where you
&lt;em&gt;vendor&lt;&#x2F;em&gt; your dependencies like how Rust and Go do.&lt;&#x2F;p&gt;
&lt;p&gt;To &lt;em&gt;vendor&lt;&#x2F;em&gt; it, it&#x27;s simple. Just run&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;tar&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;zstd&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;cvf&lt;&#x2F;span&gt; vendor.tar.zst lib&#x2F;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Copy &lt;code&gt;vendor.tar.zst&lt;&#x2F;code&gt; to the root of the project package folder. Add it to one of the sources of your project and adjust your &lt;code&gt;%setup&lt;&#x2F;code&gt; with flags &lt;code&gt;-qa1&lt;&#x2F;code&gt;
which &lt;code&gt;a1&lt;&#x2F;code&gt; means extract &lt;code&gt;Source1: vendor.tar.zst&lt;&#x2F;code&gt; to the root of &lt;code&gt;RPM_BUILDDIR&#x2F;shards-0.17.3&lt;&#x2F;code&gt; including the root folder of the archive &lt;code&gt;lib&#x2F;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;This will create a new directory called &lt;code&gt;lib&#x2F;&lt;&#x2F;code&gt;, and contains other crystal packages that are dependencies of that project.&lt;&#x2F;p&gt;
&lt;p&gt;Then I just used &lt;code&gt;crystal&lt;&#x2F;code&gt; to build &lt;code&gt;shards&lt;&#x2F;code&gt; as seen from the build section and do a manual install with &lt;code&gt;install&lt;&#x2F;code&gt; command at the install section.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;other-possibilities&quot;&gt;Other possibilities&lt;a class=&quot;zola-anchor&quot; href=&quot;#other-possibilities&quot; aria-label=&quot;Anchor link for: other-possibilities&quot;
  &gt;§&lt;&#x2F;a
&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;You can also remove &lt;code&gt;make&lt;&#x2F;code&gt; or &lt;code&gt;shards&lt;&#x2F;code&gt; as well if you prefer just using &lt;code&gt;crystal&lt;&#x2F;code&gt; on the build section.&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
