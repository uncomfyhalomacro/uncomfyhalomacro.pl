<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>uncomfy - distrobox</title>
    <subtitle>uh... i have a website?</subtitle>
    <link rel="self" type="application/atom+xml" href="https://uncomfyhalomacro.pl/tags/distrobox/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://uncomfyhalomacro.pl"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-01-30T00:00:00+00:00</updated>
    <id>https://uncomfyhalomacro.pl/tags/distrobox/atom.xml</id>
    <entry xml:lang="en">
        <title>Calling Executables Outside Distrobox That Are From Another Distrobox</title>
        <published>2023-08-06T00:00:00+00:00</published>
        <updated>2024-01-30T00:00:00+00:00</updated>
        
        <author>
          <name>
            Soc Virnyl Estela
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://uncomfyhalomacro.pl/blog/calling-executables-outside-distrobox-that-are-from-another-distrobox/"/>
        <id>https://uncomfyhalomacro.pl/blog/calling-executables-outside-distrobox-that-are-from-another-distrobox/</id>
        
        <content type="html" xml:base="https://uncomfyhalomacro.pl/blog/calling-executables-outside-distrobox-that-are-from-another-distrobox/">&lt;h1 id=&quot;update&quot;&gt;Update&lt;a class=&quot;zola-anchor&quot; href=&quot;#update&quot; aria-label=&quot;Anchor link for: update&quot;
  &gt;ยง&lt;&#x2F;a
&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;This old post is outdated and requires a small update. To run an executable from another
container (here we use distrobox, a frontend for podman or docker), you just need to run
this command inside the desired container where you want to run the executable.&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; ln &#x2F;usr&#x2F;bin&#x2F;distrobox-host-exec &#x2F;usr&#x2F;local&#x2F;bin&#x2F;my-executable&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Make sure that the &lt;code&gt;my-executable&lt;&#x2F;code&gt; was already &lt;code&gt;distrobox-export&lt;&#x2F;code&gt;ed to the host.&lt;&#x2F;p&gt;
&lt;h1 id=&quot;old-post&quot;&gt;Old post&lt;a class=&quot;zola-anchor&quot; href=&quot;#old-post&quot; aria-label=&quot;Anchor link for: old-post&quot;
  &gt;ยง&lt;&#x2F;a
&gt;
&lt;&#x2F;h1&gt;
&lt;p&gt;To anyone that might have asked themselves&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;How do I call an executable from Y distro to the current X distro I am using in distrobox?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;The answer is to &lt;strong&gt;create a script&lt;&#x2F;strong&gt;. But first you will have to use &lt;code&gt;distrobox-host-exec&lt;&#x2F;code&gt;. Create a symlink inside your distrobox. You can either declare
an init-hook or do it manually. The command is&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;ln&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;sf&lt;&#x2F;span&gt; distrobox-host-exec &#x2F;usr&#x2F;local&#x2F;bin&#x2F;podman&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will create a pseudo podman executable that will run the host system&#x27;s &lt;code&gt;podman&lt;&#x2F;code&gt;, assuming you have that installed in your host system.&lt;&#x2F;p&gt;
&lt;p&gt;To check if it works, run&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;podman&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; ps&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This will give you a list of available containers that are active.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;example-situation&quot;&gt;Example situation&lt;a class=&quot;zola-anchor&quot; href=&quot;#example-situation&quot; aria-label=&quot;Anchor link for: example-situation&quot;
  &gt;ยง&lt;&#x2F;a
&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;So let&#x27;s assume you are in a weird situation. You want to use &lt;a href=&quot;https:&#x2F;&#x2F;ziglang.org&quot;&gt;zig&lt;&#x2F;a&gt; but the one on openSUSE Tumbleweed distrobox is 0.10.0 because it has an
issue with &lt;a href=&quot;https:&#x2F;&#x2F;ziglang.org&#x2F;download&#x2F;0.11.0&#x2F;release-notes.html#glibc-234&quot;&gt;glibc&lt;&#x2F;a&gt; versions. But it builds correctly on openSUSE Leap 15.5! The next thing you did was to create your leap distrobox&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;distrobox-create&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;i&lt;&#x2F;span&gt; leap:latest&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;n&lt;&#x2F;span&gt; leap&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And then you ran the following command inside your leap distrobox&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; zypper addrepo https:&#x2F;&#x2F;download.opensuse.org&#x2F;repositories&#x2F;devel:tools:compiler&#x2F;15.5&#x2F;devel:tools:compiler.repo&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; zypper refresh&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;sudo&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; zypper install zig&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;blockquote&gt;
&lt;p&gt;So uh... how do I use zig from leap when I am in a tumbleweed distrobox?&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;By using &lt;code&gt;distrobox-host-exec&lt;&#x2F;code&gt; which calls your &lt;code&gt;podman&lt;&#x2F;code&gt; executable! Remember the symlink? Here is the idea&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;podman&lt;&#x2F;code&gt; has an &lt;code&gt;exec&lt;&#x2F;code&gt; command. Running &lt;code&gt;podman exec --help&lt;&#x2F;code&gt; gives you the following output:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; class=&quot;language-txt z-code&quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Run a process in a running container
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Description:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  Execute the specified command inside a running container.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Usage:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  podman exec [options] CONTAINER [COMMAND [ARG...]]
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Examples:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  podman exec -it ctrID ls
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  podman exec -it -w &#x2F;tmp myCtr pwd
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  podman exec --user root ctrID ls
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Options:
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  -d, --detach               Run the exec session in detached mode (backgrounded)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      --detach-keys string   Select the key sequence for detaching a container. Format is a single character [a-Z] or ctrl-&amp;lt;value&amp;gt; where &amp;lt;value&amp;gt; is one of: a-z, @, ^, [, , or _ (default &amp;quot;ctrl-p,ctrl-q&amp;quot;)
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  -e, --env stringArray      Set environment variables
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      --env-file strings     Read in a file of environment variables
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  -i, --interactive          Keep STDIN open even if not attached
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  -l, --latest               Act on the latest container podman is aware of
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;                             Not supported with the &amp;quot;--remote&amp;quot; flag
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      --preserve-fds uint    Pass N additional file descriptors to the container
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;      --privileged           Give the process extended Linux capabilities inside the container.  The default is false
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  -t, --tty                  Allocate a pseudo-TTY. The default is false
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  -u, --user string          Sets the username or UID used and optionally the groupname or GID for the specified command
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;  -w, --workdir string       Working directory inside the container
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Since it says here that we can run a process from a running container, we can create a script to run &lt;code&gt;zig&lt;&#x2F;code&gt; in your tumbleweed distrobox!&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;!&#x2F;bin&#x2F;bash&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;podman&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; exec&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;user&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;USER&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;it&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;w&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;PWD&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; leap zig &lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-shell&quot;&gt;@&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And save it to &lt;code&gt;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;zig&lt;&#x2F;code&gt; and run &lt;code&gt;sudo chmod +x &#x2F;usr&#x2F;local&#x2F;bin&#x2F;zig&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;testing-your-zig-executable&quot;&gt;Testing your zig executable&lt;a class=&quot;zola-anchor&quot; href=&quot;#testing-your-zig-executable&quot; aria-label=&quot;Anchor link for: testing-your-zig-executable&quot;
  &gt;ยง&lt;&#x2F;a
&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;Inside your tumbleweed distrobox which now contains your pseudo zig executable, you can test if it works by doing the commands&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;sh&quot; class=&quot;language-sh z-code&quot;&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;md&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; hello-zig&#x2F;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-support z-function z-cd z-shell&quot;&gt;cd&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; &lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-shell&quot;&gt;_&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;zig&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; init-exe&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;zig&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; build&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;.&#x2F;zig-out&#x2F;hello-zig&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The last command should output&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;txt&quot; class=&quot;language-txt z-code&quot;&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;All your codebase are belong to us.
&lt;&#x2F;span&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;Run `zig build test` to run the tests.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;how-it-works&quot;&gt;How it works&lt;a class=&quot;zola-anchor&quot; href=&quot;#how-it-works&quot; aria-label=&quot;Anchor link for: how-it-works&quot;
  &gt;ยง&lt;&#x2F;a
&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;We have &lt;code&gt;distrobox-host-exec&lt;&#x2F;code&gt; (which calls &lt;code&gt;host-spawn&lt;&#x2F;code&gt; in the background), and &lt;code&gt;podman&lt;&#x2F;code&gt;. By using &lt;code&gt;distrobox-host-exec&lt;&#x2F;code&gt; to
run the host system &lt;code&gt;podman&lt;&#x2F;code&gt;, we can also check other running containers, not just from &lt;code&gt;leap&lt;&#x2F;code&gt; distrobox in the previous examples.&lt;&#x2F;p&gt;
&lt;p&gt;With &lt;code&gt;podman&lt;&#x2F;code&gt;, we can use its &lt;code&gt;exec&lt;&#x2F;code&gt; command to run executables &lt;em&gt;from other containers&lt;&#x2F;em&gt;. The important flags are&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-w&lt;&#x2F;code&gt; or &lt;code&gt;--workdir&lt;&#x2F;code&gt;. This is where you set &lt;code&gt;$PWD&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-i&lt;&#x2F;code&gt; or &lt;code&gt;--interactive&lt;&#x2F;code&gt;. This allows interactivity&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;-t&lt;&#x2F;code&gt; or &lt;code&gt;--tty&lt;&#x2F;code&gt;. This will allow it to work somewhat okay-ish in a terminal.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Plus &lt;code&gt;$@&lt;&#x2F;code&gt; to add possible other subcommands of an executable e.g. &lt;code&gt;build&lt;&#x2F;code&gt;, &lt;code&gt;test&lt;&#x2F;code&gt;, &lt;code&gt;--help&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;--user&lt;&#x2F;code&gt; is set to &lt;code&gt;$USER&lt;&#x2F;code&gt; so it respects your user inside the container. Otherwise, it will become &lt;code&gt;root&lt;&#x2F;code&gt; which
maybe is not what you want.&lt;&#x2F;p&gt;
&lt;p&gt;So the final and cool command for the pseudo zig executable is:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; class=&quot;language-bash z-code&quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;!&#x2F;bin&#x2F;bash&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;
&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-comment z-begin z-shell&quot;&gt;#&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt; leap can be anything: container ID or container NAME&lt;&#x2F;span&gt;&lt;span class=&quot;z-comment z-line z-number-sign z-shell&quot;&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-source z-shell z-bash&quot;&gt;&lt;span class=&quot;z-meta z-function-call z-shell&quot;&gt;&lt;span class=&quot;z-variable z-function z-shell&quot;&gt;&#x2F;usr&#x2F;local&#x2F;bin&#x2F;podman&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-meta z-function-call z-arguments z-shell&quot;&gt; exec&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; --&lt;&#x2F;span&gt;user&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;USER&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;it&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-parameter z-option z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-parameter z-shell&quot;&gt; -&lt;&#x2F;span&gt;w&lt;&#x2F;span&gt; &lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-other z-readwrite z-shell&quot;&gt;PWD&lt;&#x2F;span&gt;&lt;&#x2F;span&gt; leap zig &lt;span class=&quot;z-meta z-group z-expansion z-parameter z-shell&quot;&gt;&lt;span class=&quot;z-punctuation z-definition z-variable z-shell&quot;&gt;$&lt;&#x2F;span&gt;&lt;span class=&quot;z-variable z-language z-shell&quot;&gt;@&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;more-information&quot;&gt;More information&lt;a class=&quot;zola-anchor&quot; href=&quot;#more-information&quot; aria-label=&quot;Anchor link for: more-information&quot;
  &gt;ยง&lt;&#x2F;a
&gt;
&lt;&#x2F;h2&gt;
&lt;p&gt;You can find more information from the following links:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;distrobox.privatedns.org&#x2F;usage&#x2F;distrobox-host-exec&#x2F;&quot;&gt;https:&#x2F;&#x2F;distrobox.privatedns.org&#x2F;usage&#x2F;distrobox-host-exec&#x2F;&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;manpages.opensuse.org&#x2F;Tumbleweed&#x2F;podman&#x2F;podman-exec.1.en.html&quot;&gt;https:&#x2F;&#x2F;manpages.opensuse.org&#x2F;Tumbleweed&#x2F;podman&#x2F;podman-exec.1.en.html&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
</feed>
